buildscript {

    ext {
        springBootVersion = "1.5.3.RELEASE"
        springFoxVersion = "2.7.0"
        springCloudVersion = "Dalston.SR1"
        logbackVersion = "4.11"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
    }
    
}

apply from: "../../java.gradle"
apply plugin: "org.springframework.boot"
apply plugin: "docker"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "jacoco"


group = "com.virginvoyages"
version = '1.0'
description = "crossreference-api"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-hateoas"
    compile "org.springframework.cloud:spring-cloud-starter-feign"
    compile "org.springframework.cloud:spring-cloud-starter-security"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "ch.qos.logback:logback-core:1.2.3"
    compile "net.logstash.logback:logstash-logback-encoder:$logbackVersion"
    compile "io.springfox:springfox-swagger2:$springFoxVersion"
    compile "io.springfox:springfox-swagger-ui:$springFoxVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.8.8"
    compile "joda-time:joda-time:2.9.9"
    compile "org.projectlombok:lombok:1.16.16"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile 'mysql:mysql-connector-java'
    compile "org.flywaydb:flyway-core:4.2.0"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "io.rest-assured:rest-assured:3.0.3"
}

/*task buildDocker(type: Docker, dependsOn: build) {
    push = false // Change to true for remote push
    //tag = "murtazacg/crossreference-api"
    dockerfile = file("src/main/docker/Dockerfile")
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}*/

// The run task added by the application plugin
// is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task.
    systemProperties System.properties
}

springBoot  {
    // This statement tells the Gradle Spring Boot plugin
    // to generate a file
    // build/resources/main/META-INF/build-info.properties
    // that is picked up by Spring Boot to display
    // via /info endpoint.
    buildInfo()
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    //'**/*Data**',
                    // TODO Refactor to use naming (package or class) and regular expression
                    // Exclude Lombok generated code.
                    'com/virginvoyages/crossreference/model/Audited.class',
                    'com/virginvoyages/crossreference/references/Reference.class',
                    'com/virginvoyages/crossreference/references/References.class',
                    'com/virginvoyages/crossreference/references/ReferencesEmbedded.class',
                    'com/virginvoyages/crossreference/sources/ReferenceSource.class',
                    'com/virginvoyages/crossreference/types/Type.class',
                    // Exclude POJO
                    'com/virginvoyages/model/Link.class',
                    'com/virginvoyages/model/Links.class',
                    'com/virginvoyages/model/Page.class',
                    // Exclude Stub code
                    'com/virginvoyages/api/MockCrossReferenceAPI.class'
            ])
        })
    }
}
