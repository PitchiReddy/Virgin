apply from: "../../java.gradle"
apply plugin: "org.springframework.boot"
apply plugin: "docker"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "jacoco"
apply plugin: "com.github.spotbugs"

group = "com.virginvoyages.api"
version = '1.0'
description = "crossreference-api"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {
    compile project(":components:crossreference")
    compile project(":components:security")
    /* */
    runtime group: 'com.netflix.feign', name: 'feign-core', version: '8.18.0'
    testCompile group: 'com.netflix.feign', name: 'feign-okhttp', version: '8.18.0'
    testCompile group: 'com.netflix.feign', name: 'feign-jaxb', version: '8.18.0'
    testCompile "joda-time:joda-time:2.9.9"
    testCompile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.8.8"
    
    testCompile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-xml-provider', version: '2.8.10'
    testCompile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.9.0'
     /* */
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-hateoas"
    compile "org.springframework.cloud:spring-cloud-starter-feign"
    compile "org.springframework.cloud:spring-cloud-starter-security"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "io.springfox:springfox-swagger2:$springFoxVersion"
    compile "io.springfox:springfox-swagger-ui:$springFoxVersion"
    compile "joda-time:joda-time:2.9.9"
    compile "org.flywaydb:flyway-core:4.2.0"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "mysql:mysql-connector-java"
    
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    testCompile "io.rest-assured:rest-assured:3.0.3"
}

tasks.withType(JavaExec) {
    systemProperties System.properties
}

springBoot  {
    buildInfo {
        additionalProperties = [
                buildNumber: System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : ""
        ]
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/virginvoyages/crossreference/api/MockCrossReferenceAPI.class'
            ])
        })
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    excludeFilter=file("spotBugsExclude.xml")
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
	exclude '**/*IT*', '**/*FuncTest*', '**/*RepositoryTest*', '**/*TestSupport*'
}


task integrationTests(type: Test){
	include '**/*IT*', '**/*RepositoryTest*'
}

task functionalTests(type: Test){
	include '**/*FuncTest*'
}

task functionalTestsLocal(type: Test){
 def local_profile = ["spring.profiles.active":"local"]
 environment local_profile
	include '**/*FuncTest*'
}


task testLocal(type: Test){
 def local_profile = ["spring.profiles.active":"local"]
 environment local_profile
	exclude '**/*IT*', '**/*FuncTest*', '**/*RepositoryTest*', '**/*TestSupport*'
}
task testAll(type: Test){
	exclude '**/*TestSupport*'
}
tasks.withType(Test) {
   def test_vars = ["crossreference_service_properties_path":"$rootDir/config/integration-api-config/src/main/resources/test/crossreference-api.yml"
 , 'application_properties_path':'$rootDir/config/integration-api-config/src/main/resources/integration-api.yml'
 , 'sailor_service_properties_path':'$rootDir/config/integration-api-config/src/main/resources/test/sailor-api.yml']
 		environment test_vars
}
