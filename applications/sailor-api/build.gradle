apply from: "../../java.gradle"
apply plugin: "org.springframework.boot"
apply plugin: "docker"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: "jacoco"
apply plugin: "com.github.spotbugs"

group = "com.virginvoyages"
version = '1.0'
description = "sailor-api"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {
    compile project(":components:logging")
    compile project(":components:data")
    compile project(":components:core")
    compile project(":components:seaware")
    compile project(":components:crossreference")
    compile project(":components:exception")
    runtime group: 'com.netflix.feign', name: 'feign-core', version: '8.18.0'
    compile group: 'com.netflix.feign', name: 'feign-okhttp', version: '8.18.0'
    compile group: 'com.netflix.feign', name: 'feign-jaxb', version: '8.18.0'
    
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-xml-provider', version: '2.8.10'
    compile group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.9.0'
    
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-hateoas"
    compile "org.springframework.cloud:spring-cloud-starter-feign"
    compile "org.springframework.cloud:spring-cloud-starter-security"
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-oauth2', version: '1.2.1.RELEASE'
   
    compile "ch.qos.logback:logback-core:1.2.3"
    compile "net.logstash.logback:logstash-logback-encoder:$logbackVersion"
    compile "io.springfox:springfox-swagger2:$springFoxVersion"
    compile "io.springfox:springfox-swagger-ui:$springFoxVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.8.8"
    compile "joda-time:joda-time:2.9.9"
    compile "org.projectlombok:lombok:1.16.16"
    compile "com.h2database:h2"
    
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "io.rest-assured:rest-assured:3.0.3"
}

// The run task added by the application plugin
// is also of type JavaExec.
tasks.withType(JavaExec) {
    systemProperties System.properties
}

springBoot  {
    // This statement tells the Gradle Spring Boot plugin
    // to generate a file
    // build/resources/main/META-INF/build-info.properties
    // that is picked up by Spring Boot to display
    // via /info endpoint.
    buildInfo {
        // Generate extra build info.
        additionalProperties = [
                buildNumber: System.getenv("BUILD_NUMBER") ? System.getenv("BUILD_NUMBER") : ""
        ]
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    //'**/*Data**',
                    // TODO Refactor to use naming (package or class) and regular expression
                    // Exclude Lombok generated code.
                    '**/model/*.class',
                    '**/data/*.class',
                    // Exclude Stub code
                    'com/virginvoyages/sailor/api/MockSailorAPI.class'
            ])
        })
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    excludeFilter=file("spotBugsExclude.xml")
    reports {
        xml.enabled false
        html.enabled true
    }
}

test {
	exclude '**/*IT*', '**/*FuncTest*', '**/*ClientTest*', '**/*Support*'
}

task integrationTests(type: Test){
	include '**/*IT*', '**/*ClientTest*'
}

task functionalTests(type: Test){
	include '**/*FuncTest*'
}

task testAll(type: Test){
	exclude '**/*Support*'
}
tasks.withType(Test) {
   
   def test_vars = ["crossreference_service_properties_path":"$rootDir/config/integration-api-config/src/main/resources/test/crossreference-api.yml"
 , 'application_properties_path':"$rootDir/config/integration-api-config/src/main/resources/integration-api.yml"
 , "sailor_service_properties_path":"$rootDir/config/integration-api-config/src/main/resources/test/sailor-api.yml"]
 environment test_vars
    }
 task functionalTestsLocal(type: Test){
 def local_profile = ["spring.profiles.active":"local"]
 environment local_profile
	include '**/*FuncTest*'
}   
